<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>algorithms on Tech notes</title><link>https://su225.github.io/tags/algorithms/</link><description>Recent content in algorithms on Tech notes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 29 Dec 2021 10:48:17 +0530</lastBuildDate><atom:link href="https://su225.github.io/tags/algorithms/index.xml" rel="self" type="application/rss+xml"/><item><title>[Leetcode] Populating the next right pointers in each node</title><link>https://su225.github.io/posts/leetcode-populating-next-right-pointers-in-each-node/</link><pubDate>Wed, 29 Dec 2021 10:48:17 +0530</pubDate><guid>https://su225.github.io/posts/leetcode-populating-next-right-pointers-in-each-node/</guid><description>Link to the problem
Brief description - We are given a perfect binary tree. The task is to link each node with its right one in the same level by filling next pointer. In the end, traversing next pointer from the leftmost node in the level should allow us to traverse through the entire level
I solved it with two approaches. Both O(n) time-complexity and one of them with constant space.</description></item></channel></rss>